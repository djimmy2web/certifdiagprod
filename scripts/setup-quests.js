const mongoose = require('mongoose');

// Import des mod√®les
const { Quest } = require('../src/models/Quest');

async function setupQuests() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/certifdiag');
    console.log('Connect√© √† MongoDB');

    // Supprimer les qu√™tes existantes
    await Quest.deleteMany({});
    console.log('Anciennes qu√™tes supprim√©es');

    const quests = [
      // Qu√™tes XP
      {
        title: 'Gagne 20 XP',
        description: 'Accumule 20 points d\'exp√©rience',
        icon: '‚≠ê',
        criteria: {
          type: 'xp',
          value: 20
        }
      },
      {
        title: 'Gagne 50 XP',
        description: 'Accumule 50 points d\'exp√©rience',
        icon: 'üåü',
        criteria: {
          type: 'xp',
          value: 50
        }
      },
      {
        title: 'Gagne 100 XP',
        description: 'Accumule 100 points d\'exp√©rience',
        icon: 'üí´',
        criteria: {
          type: 'xp',
          value: 100
        }
      },

      // Qu√™tes de r√©ponses d'affil√©e
      {
        title: '3 r√©ponses d\'affil√©e',
        description: 'Donne 3 bonnes r√©ponses cons√©cutives',
        icon: 'üî•',
        criteria: {
          type: 'correct_streak',
          value: 3
        }
      },
      {
        title: '5 r√©ponses d\'affil√©e',
        description: 'Donne 5 bonnes r√©ponses cons√©cutives',
        icon: '‚ö°',
        criteria: {
          type: 'correct_streak',
          value: 5
        }
      },
      {
        title: '10 r√©ponses d\'affil√©e',
        description: 'Donne 10 bonnes r√©ponses cons√©cutives',
        icon: 'üéØ',
        criteria: {
          type: 'correct_streak',
          value: 10
        }
      },

      // Qu√™tes de quiz termin√©s
      {
        title: 'Termine 1 quiz',
        description: 'Compl√®te 1 quiz',
        icon: 'üìù',
        criteria: {
          type: 'quiz_completed',
          value: 1
        }
      },
      {
        title: 'Termine 2 quiz',
        description: 'Compl√®te 2 quiz',
        icon: 'üìö',
        criteria: {
          type: 'quiz_completed',
          value: 2
        }
      },
      {
        title: 'Termine 3 quiz',
        description: 'Compl√®te 3 quiz',
        icon: 'üìñ',
        criteria: {
          type: 'quiz_completed',
          value: 3
        }
      },
      {
        title: 'Termine 4 quiz',
        description: 'Compl√®te 4 quiz',
        icon: 'üìò',
        criteria: {
          type: 'quiz_completed',
          value: 4
        }
      },
      {
        title: 'Termine 5 quiz',
        description: 'Compl√®te 5 quiz',
        icon: 'üìó',
        criteria: {
          type: 'quiz_completed',
          value: 5
        }
      },

      // Qu√™te de reprise de le√ßon
      {
        title: 'Reprends une le√ßon',
        description: 'Reprends une le√ßon en cours',
        icon: 'üîÑ',
        criteria: {
          type: 'lesson_resumed',
          value: 1
        }
      },

      // Qu√™te de quiz sur erreurs
      {
        title: 'Quiz sur tes erreurs',
        description: 'Fais un quiz sur tes erreurs',
        icon: 'üîç',
        criteria: {
          type: 'error_quiz',
          value: 1
        }
      },

      // Qu√™tes de questions r√©pondues
      {
        title: 'R√©ponds √† 20 questions',
        description: 'R√©ponds correctement √† 20 questions',
        icon: '‚ùì',
        criteria: {
          type: 'questions_answered',
          value: 20
        }
      },
      {
        title: 'R√©ponds √† 40 questions',
        description: 'R√©ponds correctement √† 40 questions',
        icon: '‚ùî',
        criteria: {
          type: 'questions_answered',
          value: 40
        }
      },

      // Qu√™te de badge
      {
        title: 'D√©bloque 1 badge',
        description: 'D√©bloque ton premier badge',
        icon: 'üèÜ',
        criteria: {
          type: 'badge_unlocked',
          value: 1
        }
      },

      // Qu√™tes de score minimum
      {
        title: 'Obtiens un score d\'au moins 80% dans 3 le√ßons',
        description: 'R√©ussis 3 le√ßons avec au moins 80% de bonnes r√©ponses',
        icon: 'üéØ',
        criteria: {
          type: 'score_threshold',
          value: 3,
          additionalData: {
            minScore: 80,
            lessonCount: 3
          }
        }
      },
      {
        title: 'Obtiens un score d\'au moins 80% dans 4 le√ßons',
        description: 'R√©ussis 4 le√ßons avec au moins 80% de bonnes r√©ponses',
        icon: 'üéØ',
        criteria: {
          type: 'score_threshold',
          value: 4,
          additionalData: {
            minScore: 80,
            lessonCount: 4
          }
        }
      },

      // Qu√™tes de bonnes r√©ponses d'affil√©e dans les le√ßons
      {
        title: 'Donne 5 bonnes r√©ponses d\'affil√©e dans 3 le√ßons',
        description: 'Maintiens 5 bonnes r√©ponses cons√©cutives dans 3 le√ßons diff√©rentes',
        icon: 'üî•',
        criteria: {
          type: 'correct_streak',
          value: 3,
          additionalData: {
            streakCount: 5,
            lessonCount: 3
          }
        }
      },
      {
        title: 'Donne 5 bonnes r√©ponses d\'affil√©e dans 4 le√ßons',
        description: 'Maintiens 5 bonnes r√©ponses cons√©cutives dans 4 le√ßons diff√©rentes',
        icon: '‚ö°',
        criteria: {
          type: 'correct_streak',
          value: 4,
          additionalData: {
            streakCount: 5,
            lessonCount: 4
          }
        }
      },

      // Qu√™te sp√©ciale de 10 r√©ponses d'affil√©e
      {
        title: 'R√©pondre correctement √† 10 questions d\'affil√©e',
        description: 'Donne 10 bonnes r√©ponses cons√©cutives dans une session',
        icon: 'üéñÔ∏è',
        criteria: {
          type: 'correct_streak',
          value: 10
        }
      }
    ];

    // Cr√©er toutes les qu√™tes
    const createdQuests = await Quest.insertMany(quests);
    console.log(`${createdQuests.length} qu√™tes cr√©√©es avec succ√®s`);

    // Afficher les qu√™tes cr√©√©es
    createdQuests.forEach(quest => {
      console.log(`- ${quest.title} (${quest.icon})`);
    });

  } catch (error) {
    console.error('Erreur lors de la cr√©ation des qu√™tes:', error);
  } finally {
    await mongoose.disconnect();
    console.log('D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le script
setupQuests();
