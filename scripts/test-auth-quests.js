const { MongoClient, ObjectId } = require('mongodb');

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/certifdiag';

async function testAuthQuests() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    const db = client.db();
    
    console.log('üîê Test de l\'authentification et des qu√™tes...');
    
    // V√©rifier les sessions NextAuth
    const sessions = await db.collection('sessions').find({}).toArray();
    console.log(`üîë Sessions actives: ${sessions.length}`);
    
    if (sessions.length > 0) {
      console.log('üìã Sessions trouv√©es:');
      sessions.forEach(session => {
        console.log(`   - User ID: ${session.userId}`);
        console.log(`   - Expires: ${session.expires}`);
        console.log(`   - Active: ${new Date() < new Date(session.expires)}`);
      });
    }
    
    // V√©rifier les utilisateurs
    const users = await db.collection('users').find({}).toArray();
    console.log(`üë• Utilisateurs: ${users.length}`);
    
    if (users.length > 0) {
      const user = users[0];
      console.log(`üë§ Premier utilisateur: ${user.email || user.name}`);
      console.log(`   - ID: ${user._id}`);
      console.log(`   - Points: ${user.points || 0}`);
      
      // Tester l'API des qu√™tes pour cet utilisateur
      console.log('\nüß™ Test de l\'API des qu√™tes...');
      
      // Simuler l'authentification
      const userId = new ObjectId(user._id);
      
      // V√©rifier les qu√™tes
      const quests = await db.collection('quests').find({ isActive: true }).toArray();
      console.log(`üìä Qu√™tes actives: ${quests.length}`);
      
      if (quests.length > 0) {
        console.log('\nüìã Premi√®res qu√™tes:');
        quests.slice(0, 3).forEach(quest => {
          console.log(`   - ${quest.title} (${quest.criteria.type}: ${quest.criteria.value})`);
        });
        
        // Simuler le calcul de progression
        const totalAttempts = await db.collection('attempts').countDocuments({ userId });
        const totalQuestions = await db.collection('attempts').aggregate([
          { $match: { userId } },
          { $group: { _id: null, total: { $sum: { $size: '$answers' } } } }
        ]).toArray();
        const questionsAnswered = totalQuestions[0]?.total || 0;
        
        console.log(`\nüìä Progression calcul√©e:`);
        console.log(`   - Tentatives: ${totalAttempts}`);
        console.log(`   - Questions: ${questionsAnswered}`);
        console.log(`   - Points: ${user.points || 0}`);
        
        // Cr√©er quelques qu√™tes avec progression
        const questResults = quests.slice(0, 5).map(quest => {
          let progress = 0;
          switch (quest.criteria.type) {
            case 'xp':
              progress = Math.min(user.points || 0, quest.criteria.value);
              break;
            case 'quiz_completed':
              progress = Math.min(totalAttempts, quest.criteria.value);
              break;
            case 'questions_answered':
              progress = Math.min(questionsAnswered, quest.criteria.value);
              break;
            default:
              progress = 0;
          }
          
          return {
            id: quest._id.toString(),
            title: quest.title,
            description: quest.description,
            icon: quest.icon,
            progress: progress,
            total: quest.criteria.value,
            completed: progress >= quest.criteria.value,
            type: quest.criteria.type
          };
        });
        
        console.log(`\nüéØ R√©sultats des qu√™tes:`);
        questResults.forEach(quest => {
          const status = quest.completed ? '‚úÖ' : '‚è≥';
          console.log(`   ${status} ${quest.title}: ${quest.progress}/${quest.total}`);
        });
        
        console.log('\n‚úÖ L\'API devrait retourner ces qu√™tes !');
        
      } else {
        console.log('‚ùå Aucune qu√™te active trouv√©e');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await client.close();
  }
}

testAuthQuests();
