/**
 * Script de migration pour ajouter le syst√®me de vies aux utilisateurs existants
 * √Ä ex√©cuter une seule fois apr√®s le d√©ploiement du nouveau syst√®me
 */

const { connectToDatabase } = require('../src/lib/mongodb.ts');
const mongoose = require('mongoose');

// D√©finition du sch√©ma utilisateur
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  customId: { type: String, required: true, unique: true },
  lives: {
    current: { type: Number, default: 5, min: 0, max: 10 },
    max: { type: Number, default: 5, min: 1, max: 10 },
    lastRegeneration: { type: Date, default: Date.now },
    regenerationRate: { type: Number, default: 4 }, // 4 heures
  },
}, { timestamps: true });

const User = mongoose.models.User || mongoose.model('User', UserSchema);

async function migrateUsersLives() {
  try {
    console.log('üöÄ D√©but de la migration du syst√®me de vies...');
    
    await connectToDatabase();
    
    // Compter les utilisateurs sans syst√®me de vies
    const usersWithoutLives = await User.countDocuments({
      $or: [
        { lives: { $exists: false } },
        { lives: null }
      ]
    });
    
    console.log(`üìä ${usersWithoutLives} utilisateurs √† migrer`);
    
    if (usersWithoutLives === 0) {
      console.log('‚úÖ Tous les utilisateurs ont d√©j√† le syst√®me de vies');
      return;
    }
    
    // Mise √† jour en lot des utilisateurs
    const result = await User.updateMany(
      {
        $or: [
          { lives: { $exists: false } },
          { lives: null }
        ]
      },
      {
        $set: {
          lives: {
            current: 5,
            max: 5,
            lastRegeneration: new Date(),
            regenerationRate: 4
          }
        }
      }
    );
    
    console.log(`‚úÖ Migration termin√©e avec succ√®s!`);
    console.log(`üìà ${result.modifiedCount} utilisateurs mis √† jour`);
    
    // V√©rification
    const totalUsers = await User.countDocuments();
    const usersWithLives = await User.countDocuments({
      lives: { $exists: true, $ne: null }
    });
    
    console.log(`üìä R√©sum√©:`);
    console.log(`   - Total utilisateurs: ${totalUsers}`);
    console.log(`   - Avec syst√®me de vies: ${usersWithLives}`);
    console.log(`   - Sans syst√®me de vies: ${totalUsers - usersWithLives}`);
    
    if (totalUsers === usersWithLives) {
      console.log('üéâ Migration 100% r√©ussie!');
    } else {
      console.log('‚ö†Ô∏è  Certains utilisateurs n\'ont pas √©t√© migr√©s');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    throw error;
  }
}

// Fonction pour tester le syst√®me de r√©g√©n√©ration
async function testLivesRegeneration() {
  try {
    console.log('üß™ Test du syst√®me de r√©g√©n√©ration...');
    
    // Cr√©er un utilisateur de test avec des vies r√©duites et une ancienne date
    const testUser = await User.findOneAndUpdate(
      { email: 'test-lives@example.com' },
      {
        $set: {
          email: 'test-lives@example.com',
          customId: 'test-lives-user',
          lives: {
            current: 2,
            max: 5,
            lastRegeneration: new Date(Date.now() - 5 * 60 * 60 * 1000), // Il y a 5 heures
            regenerationRate: 4
          }
        }
      },
      { upsert: true, new: true }
    );
    
    console.log('üë§ Utilisateur de test cr√©√©:', {
      customId: testUser.customId,
      lives: testUser.lives
    });
    
    // Simuler la r√©g√©n√©ration
    const now = new Date();
    const lastRegen = new Date(testUser.lives.lastRegeneration);
    const hoursElapsed = Math.floor((now.getTime() - lastRegen.getTime()) / (1000 * 60 * 60));
    
    console.log(`‚è∞ Heures √©coul√©es: ${hoursElapsed}`);
    
    if (hoursElapsed >= testUser.lives.regenerationRate) {
      const livesToAdd = Math.floor(hoursElapsed / testUser.lives.regenerationRate);
      const newLives = Math.min(testUser.lives.current + livesToAdd, testUser.lives.max);
      
      testUser.lives.current = newLives;
      testUser.lives.lastRegeneration = new Date(
        lastRegen.getTime() + (livesToAdd * testUser.lives.regenerationRate * 60 * 60 * 1000)
      );
      
      await testUser.save();
      
      console.log('‚úÖ R√©g√©n√©ration simul√©e:', {
        livesAjoutees: livesToAdd,
        nouvellesVies: newLives,
        prochaineRegeneration: testUser.lives.lastRegeneration
      });
    } else {
      console.log('‚è≥ Pas encore de r√©g√©n√©ration n√©cessaire');
    }
    
    // Nettoyer l'utilisateur de test
    await User.deleteOne({ email: 'test-lives@example.com' });
    console.log('üßπ Utilisateur de test supprim√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cution du script
async function main() {
  try {
    await migrateUsersLives();
    await testLivesRegeneration();
    
    console.log('üèÅ Script termin√© avec succ√®s');
    process.exit(0);
  } catch (error) {
    console.error('üí• Erreur fatale:', error);
    process.exit(1);
  }
}

// Ex√©cuter seulement si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  migrateUsersLives,
  testLivesRegeneration
};
